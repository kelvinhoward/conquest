#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2010-2013 Roger Light <roger@atchoo.org>
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Distribution License v1.0
# which accompanies this distribution.
#
# The Eclipse Distribution License is available at
#   http://www.eclipse.org/org/documents/edl-v10.php.
#
# Contributors:
#    Roger Light - initial implementation
# Copyright (c) 2010,2011 Roger Light <roger@atchoo.org>
# All rights reserved.

# server.pi intended to run on a Raspberry Pi on same wifi as NodeMCU devices
# and generates json file used to display status of the game

#import context  # Ensures paho is in PYTHONPATH
import paho.mqtt.client as mqtt
import json

ccp = {} # Define Conquest Control Point Dictionary-key/value of each device and current state

def on_connect(mqttc, obj, flags, rc):
    print("rc: " + str(rc))
    mqttc.subscribe([("register", 0)])
#needs to load json file and register to all CCP's known to the system

def on_message(mqttc, obj, msg):
    msg.payload = msg.payload.decode("utf-8")
    #if registering new CCP, subscribe to it as a topic and add to json file
    if (msg.topic == "register"):
        if msg.payload not in ccp:
            print("Adding " + msg.payload + " CP to Array")
            mqttc.subscribe([(msg.payload, 0)])
            ccp[msg.payload]="Registered"
    else: #Update json file with status change to CCP
        print(msg.topic + " " + msg.payload)
        ccp[msg.topic]=msg.payload
        update_records()

def on_publish(mqttc, obj, mid):
    print("mid: " + str(mid))

def on_subscribe(mqttc, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

def on_log(mqttc, obj, level, string):
    print(string)

def update_records():
    with open("game_data.json", "w") as write_file:
        json.dump(ccp, write_file)

# Conquest Control Point Server
mqttc = mqtt.Client("CCP_Server")
#will_set(status, payload="Peace Out", qos=0, retain=False)
mqttc.on_message = on_message
mqttc.username_pw_set("lasertag", password="pewpew")
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.connect("raspberrypi", 1883, 60)

mqttc.loop_forever()